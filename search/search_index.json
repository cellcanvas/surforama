{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#surforama","title":"Surforama","text":"<p>a napari-based tool for using surfaces to explore volumetric data. Using <code>Surforama</code> you can visualize densities on a membrane surface, annotate particle locations and orientations, and analyze the picked particles.</p> <p>inspired by membranorama</p> <p></p>"},{"location":"#installation","title":"installation","text":"<p>To install <code>Surforama</code>, see our installation guides for users and developers.</p>"},{"location":"#getting-started","title":"getting started","text":"<p>If you would like to give <code>Surforama</code> a try, check out our Getting Started tutorial.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing-to-surforama","title":"Contributing to Surforama","text":""},{"location":"contributing/#developer-installation","title":"developer installation","text":"<p>If you would like to make changes to the surforama source code, you can install surformama with the developer tools as follows:</p> <p></p><pre><code>cd /path/to/your/surforama/source/code/folder\npip install -e \".[dev]\"\n</code></pre> We use pre-commit to keep the code tidy. Install the pre-commit hooks to activate the checks: <pre><code>pre-commit install\n</code></pre>"},{"location":"getting_started/","title":"Getting started","text":""},{"location":"getting_started/#getting-started-with-surforama","title":"Getting started with surforama","text":"<p>This short tutorial explains how to annotate particles on your first membrane with <code>Surforama</code>. If you haven't already installed <code>Surforama</code>, please see our installation instructions. First, open your terminal and activate the Python environment with <code>Surforma</code> installed. Then launch <code>Surforama</code> with the included sample data with the following command</p> <pre><code>surforama --demo\n</code></pre> <p>This will launch the napari viewer with the Surforama plugins and sample data open. Note that the first time you launch napari may take a bit of extra time. The sample data is a tomogram and of a Chal chloroplast and a mesh of a segment of membrane. In this demo, we will annotate the photosystem II densities on the surface of this membrane. The tomogram is loaded as an image layer and the mesh of the membrane surface is loaded as a surface layer.</p> <p></p> <p>The tomogram is rendered as a 2D slice. You can move the position of the slice being rendered by first selecting the image layer (named \"tomogram\") from the layer list and then holding the \"shift\" key while clicking and dragging on the plane with your left mouse button. You can rotate the view by clicking and dragging in the canvas and zoom by using the scroll wheel on your mouse.</p> <p></p> <p></p> <p>We can now initialize the picking mode that will allow you to annotate particle locations and orientations on the membrane. First, select the mesh layer from the layer list (named \"mesh_data\"). Then click the \"start picking\" button.</p> <p></p> <p>With the picking mode activated, we can now annotate particles on the membrane surface. We can select the centroid of a particle by clicking on it. This will place the particle. We can then set the orientation by adjusting the orientation slider underneath the \"enable/disable\" picking button (denoted in the screenshot above). The orientation of the particle is indicated by orange arrow point away from the centroid marker.</p> <p></p> <p>Finally, you can output your annotated particles as a Relion-formatted Star file. To do so, enter the file path in the \"Save\" table of the \"Save points\" widget and click the \"Save to star file\" button.</p> <p></p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installing-surforama","title":"Installing surforama","text":"<p><code>Surforama</code> is a python package that can be installed via PyPI. If you are just getting started, we recommend installing Surforama via an environment manager such as <code>venv</code> or <code>mamba</code>. We recommend Python 3.9 or greater. Once you have set up your Python environment, you can install <code>Surforama</code> with the following commands.</p> <p><code>surforama</code> requires the napari viewer. If you would like to install napari and surforama together in one line, you can use the following command:</p> <pre><code>pip install \"surforama[napari]\"\n</code></pre> <p>If you already have napari installed, you can directly install surforama in the same environment:</p> <pre><code>pip install surforama\n</code></pre> <p>After installation completes, you can test the installation using our Getting Started tutorial. If you have questions you can post on the CellCanvas stream of the image.sc zulip chat.</p>"},{"location":"installation/#developer-installation","title":"Developer installation","text":"<p>If you would like to contribute to <code>Surforama</code>, please see our Contributing Guide.</p>"},{"location":"surforama_for_data_portal/","title":"CZ cryoET Data Portal","text":""},{"location":"surforama_for_data_portal/#loading-data-from-the-cz-cryoet-data-portal","title":"Loading data from the CZ cryoET Data Portal","text":"<p>For this code to work you'll need to install <code>cryoet-data-portal</code> which you can do by following the installation instructions on this site.</p>"},{"location":"surforama_for_data_portal/#script","title":"Script","text":"<p>This script will: - load a tomogram, membrane annotation, and points from the cryoET data portal - run connected components and return the 3rd largest component (in this dataset the large membranes can be slow for <code>surforama</code>) - open the Surforama widget</p> <p>Once that has happened there are some interactive steps: - select the layer for the 3rd largest component in <code>surforama</code> - run <code>Generate Mesh</code> - run <code>start surfing</code> - explore the surface of this section of membrane</p> <pre><code>import cryoet_data_portal as portal\nimport zarr\nimport napari\nimport s3fs\nimport ndjson\nimport numpy as np\nimport scipy.ndimage as ndi\nfrom skimage import measure\nimport surforama\n\n# Instantiate a client, using the data portal GraphQL API by default\nclient = portal.Client()\n\nfs = s3fs.S3FileSystem(anon=True)\n\n# Use the find method to select datasets that contain membrane annotations\ndatasets = portal.Dataset.find(client, [portal.Dataset.runs.tomogram_voxel_spacings.annotations.object_name.ilike(\"%membrane%\")])\ndataset_id = datasets[0].id\n\n# An example Tomogram\ntomo = portal.Tomogram.find(client, [portal.Tomogram.tomogram_voxel_spacing.run.dataset_id == dataset_id])[0]\nrun_id = tomo.tomogram_voxel_spacing.run.id\n\n# Show downscaled tomogram\ng = zarr.open_array(f\"{tomo.https_omezarr_dir}/2\", mode='r')\n\n# Annotations\nannotations = tomo.tomogram_voxel_spacing.annotations\n\n# Ribosomes\nribosomes_a = annotations[0]\nribosome_name = ribosomes_a.object_name\nribosomes = []\nwith fs.open(ribosomes_a.files[0].s3_path) as pointfile:\n    for point in ndjson.reader(pointfile):\n        ribosomes.append((point['location']['z'], point['location']['y'], point['location']['x']))\n\n# Membrane\nmembrane_a = annotations[1]\nmembrane_name = membrane_a.object_name\nmembrane_path = membrane_a.files[0].https_path\nmembrane = zarr.open_array(f\"{membrane_path}/2\")\n\n# Run connected components on the membrane data\nlabeled_membrane, num_features = ndi.label(membrane)\nsizes = np.bincount(labeled_membrane.ravel())\n\n# Exclude background (label 0) and sort the component sizes in descending order\n# Get the labels sorted in reverse by component size (excluding background)\nsorted_labels = np.argsort(sizes[1:])[::-1] + 1\n\n# Get the label of the 3rd largest component so we don't have a large mesh\nthird_largest_label = sorted_labels[2]\n\n# Create a mask\nthird_largest_component_mask = labeled_membrane == third_largest_label\n\n# Load into Surforama and Napari\nviewer = napari.Viewer(ndisplay=3)\n\n# Add tomogram, ribosomes, and membrane data to the viewer\nviewer.add_points(ribosomes, face_color=\"red\")\nviewer.add_image(g, scale=(4, 4, 4))\nviewer.add_labels(membrane, scale=(4, 4, 4))\nviewer.add_labels(third_largest_component_mask, scale=(4, 4, 4))\n\n# Instantiate the Surforama widget\nsurforama_widget = surforama.QtSurforama(viewer)\nviewer.window.add_dock_widget(surforama_widget, area=\"right\", name=\"Surforama\")\n\nnapari.run()\n</code></pre>"}]}