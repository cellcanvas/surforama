{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#surforama","title":"surforama","text":"<p>a napari-based tool for using surfaces to explore volumetric data in napari</p> <p>inspired by membranorama</p> <p></p>"},{"location":"#installation","title":"installation","text":"<p><code>surforama</code> requires the napari viewer. If you would like to install napari and surforama together in one line, you can use the following command:</p> <pre><code>pip install \"surforama[napari]\"\n</code></pre> <p>If you already have napari installed, you can directly install surforama in the same environment:</p> <pre><code>pip install surforama\n</code></pre>"},{"location":"#usage","title":"usage","text":""},{"location":"#launch-with-demo-data","title":"launch with demo data","text":"<p>If you'd like to test surforama out, you can launch surforama with demo data:</p> <pre><code>surforama --demo\n</code></pre>"},{"location":"#launch-without-data","title":"launch without data","text":"<p>You can launch surforama using the command line interface. After you have installed surforama, you can launch it with the following command in your terminal:</p> <p></p><pre><code>surforama\n</code></pre> After surforama launches, you can load your image and mesh into napari and get surfing!"},{"location":"#launch-with-data","title":"launch with data","text":"<p>If you have an MRC-formatted tomogram and an obj-formatted mesh, you can launch using the following command:</p> <pre><code>surforama --image-path /path/to/image.mrc --mesh-path /path/to/mesh.obj\n</code></pre>"},{"location":"#developer-installation","title":"developer installation","text":"<p>If you would like to make changes to the surforama source code, you can install surformama with the developer tools as follows:</p> <p></p><pre><code>cd /path/to/your/surforama/source/code/folder\npip install -e \".[dev]\"\n</code></pre> We use pre-commit to keep the code tidy. Install the pre-commit hooks to activate the checks: <pre><code>pre-commit install\n</code></pre>"},{"location":"surforama_for_data_portal/","title":"Loading data from the CZ cryoET Data Portal","text":""},{"location":"surforama_for_data_portal/#loading-data-from-the-cz-cryoet-data-portal","title":"Loading data from the CZ cryoET Data Portal","text":"<p>For this code to work you'll need to install <code>cryoet-data-portal</code> which you can do by following the installation instructions on this site.</p>"},{"location":"surforama_for_data_portal/#script","title":"Script","text":"<p>This script will: - load a tomogram, membrane annotation, and points from the cryoET data portal - run connected components and return the 3rd largest component (in this dataset the large membranes can be slow for <code>surforama</code>) - open the Surforama widget</p> <p>Once that has happened there are some interactive steps: - select the layer for the 3rd largest component in <code>surforama</code> - run <code>Generate Mesh</code> - run <code>start surfing</code> - explore the surface of this section of membrane</p> <pre><code>import cryoet_data_portal as portal\nimport zarr\nimport napari\nimport s3fs\nimport ndjson\nimport numpy as np\nimport scipy.ndimage as ndi\nfrom skimage import measure\nimport surforama\n\n# Instantiate a client, using the data portal GraphQL API by default\nclient = portal.Client()\n\nfs = s3fs.S3FileSystem(anon=True)\n\n# Use the find method to select datasets that contain membrane annotations\ndatasets = portal.Dataset.find(client, [portal.Dataset.runs.tomogram_voxel_spacings.annotations.object_name.ilike(\"%membrane%\")])\ndataset_id = datasets[0].id\n\n# An example Tomogram\ntomo = portal.Tomogram.find(client, [portal.Tomogram.tomogram_voxel_spacing.run.dataset_id == dataset_id])[0]\nrun_id = tomo.tomogram_voxel_spacing.run.id\n\n# Show downscaled tomogram\ng = zarr.open_array(f\"{tomo.https_omezarr_dir}/2\", mode='r')\n\n# Annotations\nannotations = tomo.tomogram_voxel_spacing.annotations\n\n# Ribosomes\nribosomes_a = annotations[0]\nribosome_name = ribosomes_a.object_name\nribosomes = []\nwith fs.open(ribosomes_a.files[0].s3_path) as pointfile:\n    for point in ndjson.reader(pointfile):\n        ribosomes.append((point['location']['z'], point['location']['y'], point['location']['x']))\n\n# Membrane\nmembrane_a = annotations[1]\nmembrane_name = membrane_a.object_name\nmembrane_path = membrane_a.files[0].https_path\nmembrane = zarr.open_array(f\"{membrane_path}/2\")\n\n# Run connected components on the membrane data\nlabeled_membrane, num_features = ndi.label(membrane)\nsizes = np.bincount(labeled_membrane.ravel())\n\n# Exclude background (label 0) and sort the component sizes in descending order\n# Get the labels sorted in reverse by component size (excluding background)\nsorted_labels = np.argsort(sizes[1:])[::-1] + 1\n\n# Get the label of the 3rd largest component so we don't have a large mesh\nthird_largest_label = sorted_labels[2]\n\n# Create a mask\nthird_largest_component_mask = labeled_membrane == third_largest_label\n\n# Load into Surforama and Napari\nviewer = napari.Viewer(ndisplay=3)\n\n# Add tomogram, ribosomes, and membrane data to the viewer\nviewer.add_points(ribosomes, face_color=\"red\")\nviewer.add_image(g, scale=(4, 4, 4))\nviewer.add_labels(membrane, scale=(4, 4, 4))\nviewer.add_labels(third_largest_component_mask, scale=(4, 4, 4))\n\n# Instantiate the Surforama widget\nsurforama_widget = surforama.QtSurforama(viewer)\nviewer.window.add_dock_widget(surforama_widget, area=\"right\", name=\"Surforama\")\n\nnapari.run()\n</code></pre>"}]}